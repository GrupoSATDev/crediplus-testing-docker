{
  "version": 3,
  "sources": ["src/app/pages/configuraciones/tipos-pagos/grid-tipos-pagos/grid-tipos-pagos.component.ts", "src/app/pages/configuraciones/tipos-pagos/grid-tipos-pagos/grid-tipos-pagos.component.html", "src/app/pages/configuraciones/tipos-pagos/tipos-pagos.routes.ts"],
  "sourcesContent": ["import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { CustomTableComponent } from '../../../shared/custom-table/custom-table.component';\r\nimport { MatButton } from '@angular/material/button';\r\nimport { MatFormField } from '@angular/material/form-field';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { MatInput } from '@angular/material/input';\r\nimport { map, Subscription } from 'rxjs';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { EstadosDatosService } from '../../../../core/services/estados-datos.service';\r\nimport { Estados } from '../../../../core/enums/estados';\r\nimport { TiposPagosService } from '../../../../core/services/tipos-pagos.service';\r\n\r\n@Component({\r\n  selector: 'app-grid-tipos-pagos',\r\n  standalone: true,\r\n    imports: [\r\n        CustomTableComponent,\r\n        MatButton,\r\n        MatFormField,\r\n        MatIcon,\r\n        MatInput,\r\n    ],\r\n  templateUrl: './grid-tipos-pagos.component.html',\r\n  styleUrl: './grid-tipos-pagos.component.scss'\r\n})\r\nexport class GridTiposPagosComponent implements OnInit, OnDestroy{\r\n\r\n    public subcription$: Subscription;\r\n\r\n    data = [];\r\n\r\n    columns = ['Estado', 'Tipos de pagos'];\r\n    columnPropertyMap = {\r\n        'Estado': 'estado',\r\n        'Tipos de pagos': 'nombre',\r\n    };\r\n\r\n    constructor(\r\n        private tiposPagos: TiposPagosService\r\n    ) {\r\n    }\r\n\r\n    getTiposPagos() {\r\n        this.subcription$ = this.tiposPagos.getTiposPagos().pipe(\r\n            map((response) => {\r\n                response.data.forEach((items) => {\r\n                    if (items.estado) {\r\n                        items.estado = Estados.ACTIVO;\r\n                    }else {\r\n                        items.estado = Estados.INACTIVO;\r\n                    }\r\n                })\r\n                return response;\r\n\r\n            })\r\n        ).subscribe((response) => {\r\n            this.data = response.data;\r\n        })\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subcription$.unsubscribe();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getTiposPagos();\r\n    }\r\n\r\n}\r\n", "<div\r\n    class=\"bg-card flex min-w-0 flex-auto flex-col dark:bg-transparent sm:absolute sm:inset-0 sm:overflow-hidden\"\r\n>\r\n    <div\r\n        class=\"relative flex flex-0 flex-col border-b px-6 py-8 sm:flex-row sm:items-center sm:justify-between md:px-8\"\r\n    >\r\n        <!-- Title -->\r\n        <div class=\"text-3xl font-semibold tracking-tight\">Tipos de Pagos</div>\r\n\r\n    </div>\r\n\r\n    <!--Main-->\r\n    <div class=\"flex flex-auto overflow-hidden\">\r\n        <!-- Products list -->\r\n        <div\r\n            class=\"flex flex-auto flex-col overflow-hidden sm:mb-18 sm:overflow-y-auto\"\r\n        >\r\n            <app-custom-table\r\n                [columns]=\"columns\"\r\n                [displayedColumns]=\"columns\"\r\n                [columnPropertyMap]=\"columnPropertyMap\"\r\n                [data]=\"data\"\r\n            ></app-custom-table>\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>\r\n", "import { Routes } from '@angular/router';\r\nimport { GridTiposPagosComponent } from './grid-tipos-pagos/grid-tipos-pagos.component';\r\n\r\nexport default [\r\n    {\r\n        path: '',\r\n        component: GridTiposPagosComponent\r\n    }\r\n] as Routes;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBM,IAAO,2BAAP,MAAO,yBAAuB;EAYhC,YACY,YAA6B;AAA7B,SAAA,aAAA;AATZ,SAAA,OAAO,CAAA;AAEP,SAAA,UAAU,CAAC,UAAU,gBAAgB;AACrC,SAAA,oBAAoB;MAChB,UAAU;MACV,kBAAkB;;EAMtB;EAEA,gBAAa;AACT,SAAK,eAAe,KAAK,WAAW,cAAa,EAAG,KAChD,IAAI,CAAC,aAAY;AACb,eAAS,KAAK,QAAQ,CAAC,UAAS;AAC5B,YAAI,MAAM,QAAQ;AACd,gBAAM,SAAS,QAAQ;QAC3B,OAAM;AACF,gBAAM,SAAS,QAAQ;QAC3B;MACJ,CAAC;AACD,aAAO;IAEX,CAAC,CAAC,EACJ,UAAU,CAAC,aAAY;AACrB,WAAK,OAAO,SAAS;IACzB,CAAC;EACL;EAEA,cAAW;AACP,SAAK,aAAa,YAAW;EACjC;EAEA,WAAQ;AACJ,SAAK,cAAa;EACtB;;;mBAzCS,0BAAuB,4BAAA,iBAAA,CAAA;AAAA;yFAAvB,0BAAuB,WAAA,CAAA,CAAA,sBAAA,CAAA,GAAA,YAAA,MAAA,UAAA,CAAA,6BAAA,GAAA,OAAA,GAAA,MAAA,GAAA,QAAA,CAAA,CAAA,GAAA,WAAA,QAAA,WAAA,aAAA,YAAA,uBAAA,eAAA,cAAA,oBAAA,GAAA,CAAA,GAAA,YAAA,QAAA,UAAA,YAAA,YAAA,QAAA,QAAA,eAAA,mBAAA,sBAAA,SAAA,GAAA,CAAA,GAAA,YAAA,iBAAA,gBAAA,GAAA,CAAA,GAAA,QAAA,aAAA,iBAAA,GAAA,CAAA,GAAA,QAAA,aAAA,YAAA,mBAAA,YAAA,oBAAA,GAAA,CAAA,GAAA,WAAA,oBAAA,qBAAA,MAAA,CAAA,GAAA,UAAA,SAAA,iCAAA,IAAA,KAAA;AAAA,MAAA,KAAA,GAAA;ACzBpC,IAAA,yBAAA,GAAA,OAAA,CAAA,EAEC,GAAA,OAAA,CAAA,EAGI,GAAA,OAAA,CAAA;AAEsD,IAAA,iBAAA,GAAA,gBAAA;AAAc,IAAA,uBAAA,EAAM;AAK3E,IAAA,yBAAA,GAAA,OAAA,CAAA,EAA4C,GAAA,OAAA,CAAA;AAKpC,IAAA,oBAAA,GAAA,oBAAA,CAAA;AAMJ,IAAA,uBAAA,EAAM,EAEJ;;;AAPM,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,WAAA,IAAA,OAAA,EAAmB,oBAAA,IAAA,OAAA,EACS,qBAAA,IAAA,iBAAA,EACW,QAAA,IAAA,IAAA;;kBDJ/C,oBAAoB,EAAA,CAAA;AAStB,IAAO,0BAAP;;6EAAO,yBAAuB,EAAA,WAAA,2BAAA,UAAA,kGAAA,YAAA,GAAA,CAAA;AAAA,GAAA;;;AEtBpC,IAAA,6BAAe;EACX;IACI,MAAM;IACN,WAAW;;;",
  "names": []
}
