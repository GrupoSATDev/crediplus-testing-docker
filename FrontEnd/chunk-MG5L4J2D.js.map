{"version":3,"sources":["src/app/core/services/tipos-empresas.service.ts","node_modules/date-fns/constants.js","node_modules/date-fns/constructFrom.js","node_modules/date-fns/toDate.js","node_modules/date-fns/parseISO.js","src/app/pages/configuraciones/empresas-clientes/form-empresas-clientes/form-empresas-clientes.component.ts","src/app/pages/configuraciones/empresas-clientes/form-empresas-clientes/form-empresas-clientes.component.html","src/app/pages/configuraciones/empresas-clientes/grid-empresas-clientes/grid-empresas-clientes.component.ts","src/app/pages/configuraciones/empresas-clientes/grid-empresas-clientes/grid-empresas-clientes.component.html","src/app/pages/configuraciones/empresas-clientes/empresas-clientes.routes.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AppSettingsService } from '../app-config/app-settings-service';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TiposEmpresasService {\r\n\r\n  constructor(\r\n      private _http: HttpClient,\r\n      private appSettings: AppSettingsService\r\n  ) { }\r\n\r\n  getTiposEmpresas(): Observable<any> {\r\n      return this._http.get(this.appSettings.tiposEmpresas.url.base);\r\n  }\r\n}\r\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n","import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","import {\n  millisecondsInHour,\n  millisecondsInMinute,\n} from \"./constants.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link parseISO} function options.\n */\n\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n * @param options - An object with options\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport function parseISO(argument, options) {\n  const invalidDate = () => constructFrom(options?.in, NaN);\n\n  const additionalDigits = options?.additionalDigits ?? 2;\n  const dateStrings = splitDateString(argument);\n\n  let date;\n  if (dateStrings.date) {\n    const parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (!date || isNaN(+date)) return invalidDate();\n\n  const timestamp = +date;\n  let time = 0;\n  let offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n    if (isNaN(time)) return invalidDate();\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n    if (isNaN(offset)) return invalidDate();\n  } else {\n    const tmpDate = new Date(timestamp + time);\n    const result = toDate(0, options?.in);\n    result.setFullYear(\n      tmpDate.getUTCFullYear(),\n      tmpDate.getUTCMonth(),\n      tmpDate.getUTCDate(),\n    );\n    result.setHours(\n      tmpDate.getUTCHours(),\n      tmpDate.getUTCMinutes(),\n      tmpDate.getUTCSeconds(),\n      tmpDate.getUTCMilliseconds(),\n    );\n    return result;\n  }\n\n  return toDate(timestamp + time + offset, options?.in);\n}\n\nconst patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/,\n};\n\nconst dateRegex =\n  /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nconst timeRegex =\n  /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nconst timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n\nfunction splitDateString(dateString) {\n  const dateStrings = {};\n  const array = dateString.split(patterns.dateTimeDelimiter);\n  let timeString;\n\n  // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(\n        dateStrings.date.length,\n        dateString.length,\n      );\n    }\n  }\n\n  if (timeString) {\n    const token = patterns.timezone.exec(timeString);\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], \"\");\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  const regex = new RegExp(\n    \"^(?:(\\\\d{4}|[+-]\\\\d{\" +\n      (4 + additionalDigits) +\n      \"})|(\\\\d{2}|[+-]\\\\d{\" +\n      (2 + additionalDigits) +\n      \"})$)\",\n  );\n\n  const captures = dateString.match(regex);\n  // Invalid ISO-formatted year\n  if (!captures) return { year: NaN, restDateString: \"\" };\n\n  const year = captures[1] ? parseInt(captures[1]) : null;\n  const century = captures[2] ? parseInt(captures[2]) : null;\n\n  // either year or century is null, not both\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length),\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n\n  const captures = dateString.match(dateRegex);\n  // Invalid ISO-formatted string\n  if (!captures) return new Date(NaN);\n\n  const isWeekDate = !!captures[4];\n  const dayOfYear = parseDateUnit(captures[1]);\n  const month = parseDateUnit(captures[2]) - 1;\n  const day = parseDateUnit(captures[3]);\n  const week = parseDateUnit(captures[4]);\n  const dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    const date = new Date(0);\n    if (\n      !validateDate(year, month, day) ||\n      !validateDayOfYearDate(year, dayOfYear)\n    ) {\n      return new Date(NaN);\n    }\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  const captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  const hours = parseTimeUnit(captures[1]);\n  const minutes = parseTimeUnit(captures[2]);\n  const seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return (\n    hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000\n  );\n}\n\nfunction parseTimeUnit(value) {\n  return (value && parseFloat(value.replace(\",\", \".\"))) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === \"Z\") return 0;\n\n  const captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n\n  const sign = captures[1] === \"+\" ? -1 : 1;\n  const hours = parseInt(captures[2]);\n  const minutes = (captures[3] && parseInt(captures[3])) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  const date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  const fourthOfJanuaryDay = date.getUTCDay() || 7;\n  const diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}\n\n// Validation functions\n\n// February is null to handle the leap year (using ||)\nconst daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\nfunction validateDate(year, month, date) {\n  return (\n    month >= 0 &&\n    month <= 11 &&\n    date >= 1 &&\n    date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28))\n  );\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return (\n    seconds >= 0 &&\n    seconds < 60 &&\n    minutes >= 0 &&\n    minutes < 60 &&\n    hours >= 0 &&\n    hours < 25\n  );\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}\n\n// Fallback for modularized imports:\nexport default parseISO;\n","import { Component, DestroyRef, inject, OnInit } from '@angular/core';\r\nimport { MatButton } from '@angular/material/button';\r\nimport { MatFormField, MatFormFieldModule, MatLabel } from '@angular/material/form-field';\r\nimport { MatInput } from '@angular/material/input';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { AsyncPipe, DatePipe, JsonPipe, NgForOf, NgIf } from '@angular/common';\r\nimport { MatOption, MatSelect, MatSelectChange } from '@angular/material/select';\r\nimport { LocacionService } from '../../../../core/services/locacion.service';\r\nimport { EmpresasMaestrasService } from '../../../../core/services/empresas-maestras.service';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { FuseConfirmationService } from '../../../../../@fuse/services/confirmation';\r\nimport { EstadosDatosService } from '../../../../core/services/estados-datos.service';\r\nimport { ToastAlertsService } from '../../../../core/services/toast-alerts.service';\r\nimport { Observable, tap } from 'rxjs';\r\nimport { guardar } from '../../../../core/constant/dialogs';\r\nimport { MatDatepicker, MatDatepickerInput, MatDatepickerToggle } from '@angular/material/datepicker';\r\nimport { TiposEmpresasService } from '../../../../core/services/tipos-empresas.service';\r\nimport { EmpresasClientesService } from '../../../../core/services/empresas-clientes.service';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\r\nimport { DateAdapterService } from '../../../../core/services/date-adapter.service';\r\nimport { CUSTOM_DATE_FORMATS } from '../../../../core/constant/custom-date-format';\r\nimport { SubscripcionService } from '../../../../core/services/subscripcion.service';\r\nimport { IConfig, NgxMaskDirective, provideNgxMask } from 'ngx-mask';\r\nimport { SwalService } from '../../../../core/services/swal.service';\r\nimport { MatSlideToggle } from '@angular/material/slide-toggle';\r\nimport { BancosService } from '../../../../core/services/bancos.service';\r\nimport { TipoCuentasService } from '../../../../core/services/tipo-cuentas.service';\r\nimport { parseISO } from 'date-fns';\r\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\r\n\r\nconst maskConfig: Partial<IConfig> = {\r\n    validation: false,\r\n};\r\n\r\n@Component({\r\n  selector: 'app-form-empresas-clientes',\r\n  standalone: true,\r\n    imports: [\r\n        MatButton,\r\n        MatFormField,\r\n        MatInput,\r\n        MatLabel,\r\n        ReactiveFormsModule,\r\n        AsyncPipe,\r\n        MatOption,\r\n        MatSelect,\r\n        NgForOf,\r\n        NgIf,\r\n        JsonPipe,\r\n        MatDatepickerInput,\r\n        MatDatepickerToggle,\r\n        MatDatepicker,\r\n        MatFormFieldModule,\r\n        NgxMaskDirective,\r\n        MatSlideToggle,\r\n    ],\r\n    providers: [\r\n        DatePipe,\r\n        { provide: DateAdapter, useClass: DateAdapterService },\r\n        { provide: MAT_DATE_LOCALE, useValue: 'en-GB' },\r\n        provideNgxMask(maskConfig)\r\n    ],\r\n  templateUrl: './form-empresas-clientes.component.html',\r\n  styleUrl: './form-empresas-clientes.component.scss'\r\n})\r\nexport class FormEmpresasClientesComponent implements OnInit{\r\n\r\n    private fb = inject(FormBuilder);\r\n    public form: FormGroup;\r\n    private _locacionService = inject(LocacionService);\r\n    private empresasService = inject(EmpresasMaestrasService);\r\n    public dialogRef = inject(MatDialogRef<FormEmpresasClientesComponent>);\r\n    public fuseService = inject(FuseConfirmationService);\r\n    public estadosDatosService = inject(EstadosDatosService);\r\n    public toasService = inject(ToastAlertsService);\r\n    public tiposEmpresaService= inject(TiposEmpresasService);\r\n    public empresaClienteService = inject(EmpresasClientesService);\r\n    public subcripciones = inject(SubscripcionService);\r\n    private bancosServices = inject(BancosService)\r\n    private tipoCuentasService = inject(TipoCuentasService);\r\n    private readonly destroyedRef = inject(DestroyRef);\r\n    public bancos$ = this.bancosServices.getBancos().pipe(\r\n        tap((response) => {\r\n            const valorSelected = response.data;\r\n            const dialogData = this._matData;\r\n            if (valorSelected && !dialogData.edit) {\r\n                this.form.get('idBanco').setValue(valorSelected[0].id)\r\n            }\r\n        })\r\n    )\r\n\r\n    public tipoCuentas$  = this.tipoCuentasService.getTipoCuentas().pipe(\r\n        tap((response) => {\r\n            const valorSelected = response.data;\r\n            const dialogData = this._matData;\r\n            if (valorSelected && !dialogData.edit) {\r\n                this.form.get('idTipoCuenta').setValue(valorSelected[0].id)\r\n            }\r\n        })\r\n    )\r\n\r\n    public departamentos$ = this._locacionService.getDepartamentos().pipe(\r\n        tap((response) => {\r\n            const valorSelected = response.data;\r\n            const dialogData = this._matData;\r\n            if (valorSelected && !dialogData.edit) {\r\n                this.form.get('idDepartamento').setValue(valorSelected[0].id)\r\n                const idDepto = this.form.get('idDepartamento').value;\r\n                this.getMunicipios(idDepto);\r\n            }\r\n        })\r\n    );\r\n\r\n    public empresas$ = this.empresasService.getEmpresas();\r\n    public municipios$: Observable<any>;\r\n    public tiposEmpresas$ = this.tiposEmpresaService.getTiposEmpresas().pipe(\r\n        tap((response) => {\r\n            const valorSelected = response.data;\r\n            const dialogData = this._matData;\r\n            if (valorSelected && !dialogData.edit) {\r\n                this.form.get('idTipoEmpresa').setValue(valorSelected[0].id)\r\n            }\r\n        })\r\n    )\r\n    public subcripciones$ = this.subcripciones.getSubcripciones().pipe(\r\n        tap((response) => {\r\n            const valorSelected = response.data;\r\n            const dialogData = this._matData;\r\n            if (valorSelected && !dialogData.edit) {\r\n                this.form.get('idSubscripcion').setValue(valorSelected[0].id)\r\n            }\r\n        })\r\n    )\r\n    public _matData = inject(MAT_DIALOG_DATA);\r\n    private datePipe = inject(DatePipe);\r\n    private swalService = inject(SwalService);\r\n\r\n    onSelected(matSelectChange: MatSelectChange) {\r\n        const id = matSelectChange.value;\r\n        this.getMunicipios(id);\r\n    }\r\n\r\n    getMunicipios(id) {\r\n        this.municipios$ = this._locacionService.getMunicipio(id).pipe(\r\n            tap((response) => {\r\n                const valorSelected = response.data;\r\n                const dialogData = this._matData;\r\n                if (valorSelected && !dialogData.edit) {\r\n                    this.form.get('idMunicipio').setValue(valorSelected[0].id)\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.createForm();\r\n        const dialogData = this._matData;\r\n        if (dialogData.edit) {\r\n            const data = dialogData.data;\r\n            this.getEmpresas(data.id);\r\n        }\r\n\r\n    }\r\n\r\n    onSave() {\r\n        if (this.form.valid) {\r\n            if (!this._matData.edit) {\r\n                const data = this.form.getRawValue();\r\n                const {idDepartamento, idEmpresa, fechaCobro, porcCobro,  ...form} = data;\r\n                let fecha = this.datePipe.transform(fechaCobro, 'yyyy-MM-dd');\r\n                const createData = {\r\n                    fechaCobro: fecha,\r\n                    porcCobro: parseFloat( porcCobro ),\r\n                    ...form\r\n                }\r\n                const dialog = this.fuseService.open({\r\n                    ...guardar\r\n                });\r\n\r\n                dialog.afterClosed().subscribe((response) => {\r\n\r\n                    if (response === 'confirmed') {\r\n                        this.empresaClienteService.postEmpresaCliente(createData).subscribe((res) => {\r\n                            console.log(res)\r\n                            this.estadosDatosService.stateGrid.next(true);\r\n                            this.swalService.ToastAler({\r\n                                icon: 'success',\r\n                                title: 'Registro Creado o Actualizado con Exito.',\r\n                                timer: 4000,\r\n                            })\r\n                            this.closeDialog();\r\n                        }, error => {\r\n                            this.swalService.ToastAler({\r\n                                icon: 'error',\r\n                                title: 'Ha ocurrido un error al crear el registro!',\r\n                                timer: 4000,\r\n                            })\r\n                        })\r\n                    }else {\r\n                        this.closeDialog();\r\n                    }\r\n                })\r\n            }else {\r\n                const data = this.form.getRawValue();\r\n                const {idDepartamento, fechaCobro, porcCobro,  ...form} = data;\r\n                let fecha = this.datePipe.transform(fechaCobro, 'yyyy-MM-dd');\r\n                const createData = {\r\n                    fechaCobro: fecha,\r\n                    porcCobro: parseFloat(porcCobro),\r\n                    ...form\r\n                }\r\n\r\n                const dialog = this.fuseService.open({\r\n                    ...guardar\r\n                });\r\n\r\n                dialog.afterClosed().subscribe((response) => {\r\n\r\n                    if (response === 'confirmed') {\r\n                        this.empresaClienteService.putEmpresaCliente(createData).subscribe((res) => {\r\n                            this.estadosDatosService.stateGrid.next(true);\r\n                            this.swalService.ToastAler({\r\n                                icon: 'success',\r\n                                title: 'Registro actualizado con exito!',\r\n                                timer: 4000,\r\n                            })\r\n                            this.closeDialog();\r\n                        }, error => {\r\n                            this.swalService.ToastAler({\r\n                                icon: 'error',\r\n                                title: 'Ha ocurrido un error al actualizar el registro!',\r\n                                timer: 4000,\r\n                            })\r\n                        })\r\n                    }else {\r\n                        this.closeDialog();\r\n                    }\r\n                })\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    public getEmpresas(id) {\r\n        this.empresaClienteService.getEmpresaCliente(id).pipe(\r\n            takeUntilDestroyed(this.destroyedRef)\r\n        ).subscribe((response) => {\r\n            if (response) {\r\n                const data = response.data;\r\n                this.form.patchValue(data);\r\n                const {idDepartamento, fechaCobro, ...form } = data;\r\n                const fecha = parseISO(fechaCobro);\r\n                this.form.patchValue({\r\n                    fechaCobro: fecha,\r\n                    ...form\r\n                })\r\n                this.municipios$ = this._locacionService.getMunicipio(idDepartamento);\r\n            }\r\n        })\r\n    }\r\n\r\n    private createForm() {\r\n        this.form = this.fb.group({\r\n            id: [null],\r\n            nit: [''],\r\n            razonSocial: [''],\r\n            correo: [''],\r\n            telefono: [''],\r\n            direccion: [''],\r\n            idDepartamento: [''],\r\n            idTipoEmpresa: [''],\r\n            idMunicipio: [''],\r\n            idSubscripcion: [''],\r\n            valorSuscripcion: [''],\r\n            porcCobro: [''],\r\n            fechaCobro: [''],\r\n            idTipoCuenta: [''],\r\n            idBanco: [''],\r\n            numCuentaBancaria: [''],\r\n            estado: [true],\r\n        })\r\n    }\r\n\r\n    closeDialog() {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n\r\n\r\n}\r\n","<div class=\"w-full sm:bg-card sm:rounded-2xl  sm:mx-0 mx-auto\" >\r\n    <div class=\"\">\r\n        <!-- Title -->\r\n        <div\r\n            class=\"mt-8 text-3xl font-semibold leading-tight tracking-tight text-center\"\r\n        >\r\n            {{_matData.edit ? 'Actualizar empresa' : 'Agregar empresa'}}\r\n        </div>\r\n\r\n        <!-- Sign Up form -->\r\n        <form class=\"mt-8\" [formGroup]=\"form\">\r\n            <div>\r\n                <p class=\"font-bold mb-4 text-2xl\">Información general</p>\r\n                <div class=\"flex flex-col sm:flex-row  mb-4\">\r\n                        <div\r\n                            class=\"fcursor-pointer\"\r\n                            (click)=\"twoStepToggle.toggle()\"\r\n                        >\r\n                            <div class=\"font-medium leading-6\">\r\n                                Estado {{form.get('estado').value ? 'Activo' : 'Inactivo'}}\r\n                            </div>\r\n                        </div>\r\n                        <mat-slide-toggle\r\n                            class=\"ml-4\"\r\n                            [color]=\"'primary'\"\r\n                            [formControlName]=\"'estado'\"\r\n                            #twoStepToggle\r\n                        >\r\n                        </mat-slide-toggle>\r\n\r\n                </div>\r\n                <div class=\"flex flex-col sm:flex-row  mb-4 gap-2\">\r\n\r\n                    <!-- Name field -->\r\n                    <mat-form-field class=\"w-full\" floatLabel=\"always\">\r\n                        <mat-label>Nit</mat-label>\r\n                        <input  matInput [formControlName]=\"'nit'\" placeholder=\"Nit\"/>\r\n                    </mat-form-field>\r\n\r\n                    <!-- Name field -->\r\n                    <mat-form-field class=\"w-full\" floatLabel=\"always\">\r\n                        <mat-label>Razón social</mat-label>\r\n                        <input  matInput [formControlName]=\"'razonSocial'\" placeholder=\"Razón social\" />\r\n                    </mat-form-field>\r\n                </div>\r\n\r\n                <div class=\"flex flex-col sm:flex-row  mb-4 gap-2\">\r\n                    <!-- Name field -->\r\n                    <mat-form-field class=\"w-full\" floatLabel=\"always\">\r\n                        <mat-label>Correo</mat-label>\r\n                        <input  matInput  [formControlName]=\"'correo'\" placeholder=\"Correo electronico\" />\r\n                    </mat-form-field>\r\n\r\n                    <!-- Name field -->\r\n                    <mat-form-field class=\"w-full\" floatLabel=\"always\">\r\n                        <mat-label>Teléfono</mat-label>\r\n                        <input  matInput     [formControlName]=\"'telefono'\" placeholder=\"Teléfono\" />\r\n                    </mat-form-field>\r\n                </div>\r\n\r\n                <div class=\"flex flex-col sm:flex-row  mb-4 gap-2\">\r\n\r\n                    <mat-form-field  class=\"w-full\" floatLabel=\"always\">\r\n                        <mat-label>Departamento</mat-label>\r\n                        <mat-select\r\n                            #data\r\n                            (selectionChange)=\"onSelected($event)\"\r\n                            [formControlName]=\"'idDepartamento'\"\r\n                            placeholder=\"Departamento\"\r\n                        >\r\n                            <ng-container *ngIf=\"departamentos$ | async as departamentos\">\r\n                                <mat-option [value]=\"departamento.id\" *ngFor=\"let departamento of departamentos.data\">{{departamento.nombre}}</mat-option>\r\n                            </ng-container>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field  class=\"w-full\" floatLabel=\"always\">\r\n                        <mat-label>Ciudad</mat-label>\r\n                        <mat-select [formControlName]=\"'idMunicipio'\" placeholder=\"Ciudad\">\r\n                            <ng-container *ngIf=\"municipios$ | async as municipios\">\r\n                                <mat-option [value]=\"municipio.id\" *ngFor=\"let municipio of municipios.data\">{{municipio.nombre}}</mat-option>\r\n                            </ng-container>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n                </div>\r\n\r\n                <div class=\"flex flex-col sm:flex-row  mb-4\">\r\n                    <mat-form-field class=\"w-full\" floatLabel=\"always\">\r\n                        <mat-label>Dirección</mat-label>\r\n                        <input\r\n                            matInput [formControlName]=\"'direccion'\" placeholder=\"Dirección\"/>\r\n                    </mat-form-field>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div>\r\n                <p class=\"font-bold mb-4 text-2xl\">Información de contrato</p>\r\n                <div class=\"flex flex-col sm:flex-row  mb-4 gap-2\">\r\n                    <mat-form-field  class=\"w-full\" floatLabel=\"always\">\r\n                        <mat-label>Tipo de empresa</mat-label>\r\n                        <mat-select [formControlName]=\"'idTipoEmpresa'\" placeholder=\"Tipo de empresa\">\r\n                            <ng-container *ngIf=\"tiposEmpresas$ | async as tipos\">\r\n                                <mat-option [value]=\"tipo.id\" *ngFor=\"let tipo of tipos.data\">{{tipo.nombre}}</mat-option>\r\n                            </ng-container>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field  class=\"w-full\" floatLabel=\"always\">\r\n                        <mat-label>Subscripción</mat-label>\r\n                        <mat-select [formControlName]=\"'idSubscripcion'\" placeholder=\"Subscripción\">\r\n                            <ng-container *ngIf=\"subcripciones$ | async as subscripciones\">\r\n                                <mat-option [value]=\"item.id\" *ngFor=\"let item of subscripciones.data\">{{item.nombre}}</mat-option>\r\n                            </ng-container>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n\r\n                </div>\r\n\r\n                <div class=\"flex flex-col sm:flex-row  mb-4 gap-2\">\r\n                    <mat-form-field class=\"w-full\" floatLabel=\"always\">\r\n                        <mat-label>Valor subscripción</mat-label>\r\n                        <input\r\n                            matInput [formControlName]=\"'valorSuscripcion'\"\r\n                            mask=\"separator.0\" thousandSeparator=\".\"\r\n                            placeholder=\"Valor subcripción\" />\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field class=\"w-full\" floatLabel=\"always\">\r\n                        <mat-label>Porcentaje cobro</mat-label>\r\n                        <input\r\n                            matInput [formControlName]=\"'porcCobro'\"\r\n                            placeholder=\"Porcentaje %\"\r\n                            mask=\"separator.6\"\r\n                            thousandSeparator=\"\"\r\n                            decimalMarker=\".\"\r\n                            [dropSpecialCharacters]=\"true\"\r\n                        />\r\n                    </mat-form-field>\r\n                </div>\r\n\r\n                <div class=\"flex flex-col sm:flex-row  mb-4\">\r\n                    <mat-form-field  class=\"w-full\" floatLabel=\"always\">\r\n                        <mat-label>Fecha de cobro</mat-label>\r\n                        <input matInput [matDatepicker]=\"picker\"  [formControlName]=\"'fechaCobro'\" placeholder=\"Fecha de cobro\">\r\n                        <mat-datepicker-toggle matIconSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                        <mat-datepicker #picker></mat-datepicker>\r\n                    </mat-form-field>\r\n\r\n                </div>\r\n                <div>\r\n                    <p class=\"font-bold mb-4 text-2xl\">Información bancaria</p>\r\n                    <div class=\"flex flex-col sm:flex-row gap-2.5\">\r\n                        <mat-form-field  class=\"w-full\" floatLabel=\"always\">\r\n                            <mat-label>Tipo de cuenta</mat-label>\r\n                            <mat-select [formControlName]=\"'idTipoCuenta'\" placeholder=\"Tipo de cuenta\">\r\n                                <ng-container *ngIf=\"tipoCuentas$ | async as tipoCuentas\">\r\n                                    <mat-option [value]=\"item.id\" *ngFor=\"let item of tipoCuentas.data\">{{item.nombre}}</mat-option>\r\n                                </ng-container>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field  class=\"w-full\" floatLabel=\"always\">\r\n                            <mat-label>Bancos</mat-label>\r\n                            <mat-select [formControlName]=\"'idBanco'\" placeholder=\"Bancos\">\r\n                                <ng-container *ngIf=\"bancos$ | async as bancos\">\r\n                                    <mat-option [value]=\"item.id\" *ngFor=\"let item of bancos.data\">{{item.nombre}}</mat-option>\r\n                                </ng-container>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n\r\n                    <div class=\"flex flex-col sm:flex-row gap-2.5\">\r\n                        <mat-form-field  class=\"w-full\" floatLabel=\"always\">\r\n                            <mat-label>Número de cuenta bancaria</mat-label>\r\n                            <input  matInput  [formControlName]=\"'numCuentaBancaria'\" placeholder=\"Número de cuenta\"/>\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div class=\"flex flex-wrap justify-end gap-2.5 \">\r\n                <button\r\n                    class=\"sm:w-auto w-full lg:mt-6 bg-credigray-100 rounded-lg transition duration-200 text-white font-semibold\"\r\n                    mat-flat-button\r\n                    [color]=\"'primary'\"\r\n                    (click)=\"closeDialog()\"\r\n                >\r\n\r\n                    <span> Cancelar </span>\r\n                </button>\r\n\r\n                <button\r\n                    class=\"sm:w-auto w-full lg:mt-6 bg-crediblue-50 rounded-lg transition duration-200 text-white font-semibold\"\r\n                    mat-flat-button\r\n                    [color]=\"'primary'\"\r\n                    (click)=\"onSave()\"\r\n                >\r\n\r\n                    <span> Guardar </span>\r\n                </button>\r\n\r\n            </div>\r\n\r\n        </form>\r\n\r\n    </div>\r\n</div>\r\n\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatButton } from '@angular/material/button';\r\nimport { MatFormField } from '@angular/material/form-field';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { MatInput } from '@angular/material/input';\r\nimport { CustomTableComponent } from '../../../shared/custom-table/custom-table.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FormEmpresasClientesComponent } from '../form-empresas-clientes/form-empresas-clientes.component';\r\nimport { IButton } from '../../../shared/interfaces/buttonsInterfaces';\r\nimport { map, Subscription } from 'rxjs';\r\nimport { EmpresasClientesService } from '../../../../core/services/empresas-clientes.service';\r\nimport { EstadosDatosService } from '../../../../core/services/estados-datos.service';\r\nimport { Estados } from '../../../../core/enums/estados';\r\n\r\n@Component({\r\n  selector: 'app-grid-empresas-clientes',\r\n  standalone: true,\r\n    imports: [\r\n        MatButton,\r\n        MatFormField,\r\n        MatIcon,\r\n        MatInput,\r\n        CustomTableComponent,\r\n    ],\r\n  templateUrl: './grid-empresas-clientes.component.html',\r\n  styleUrl: './grid-empresas-clientes.component.scss'\r\n})\r\nexport class GridEmpresasClientesComponent implements OnInit, OnDestroy{\r\n\r\n    public subcription$: Subscription;\r\n    public selectedData: any;\r\n    public searchTerm: string = '';\r\n    constructor(\r\n        private _matDialog: MatDialog,\r\n        private empresaClienteService: EmpresasClientesService,\r\n        private estadoDatosService: EstadosDatosService\r\n    ) {\r\n    }\r\n\r\n    data = [];\r\n\r\n    columns = ['Nit', 'Razon social', 'Correo', 'Telefono', 'Direccion', 'Estado'];\r\n\r\n    columnPropertyMap = {\r\n        'Nit': 'nit',\r\n        'Razon social': 'razonSocial',\r\n        'Correo': 'correo',\r\n        'Telefono': 'telefono',\r\n        'Direccion': 'direccion',\r\n        'Estado': 'estado',\r\n    };\r\n\r\n    buttons: IButton[] = [\r\n        {\r\n            label: 'Edición',\r\n            icon: 'edit',\r\n            action: (element) => {\r\n                console.log('Editing', element);\r\n                this.selectedData = element;\r\n                this.onEdit();\r\n            }\r\n        },\r\n    ];\r\n\r\n    onNew(): void {\r\n        this._matDialog.open(FormEmpresasClientesComponent, {\r\n            autoFocus: false,\r\n            data: {\r\n                edit: false,\r\n            },\r\n            maxHeight: '90vh',\r\n            disableClose: true,\r\n            panelClass: 'custom-dialog-container'\r\n        });\r\n    }\r\n\r\n    onEdit(): void {\r\n        this._matDialog.open(FormEmpresasClientesComponent, {\r\n            autoFocus: false,\r\n            data: {\r\n                edit: true,\r\n                data: this.selectedData\r\n            },\r\n            maxHeight: '90vh',\r\n            disableClose: true,\r\n            panelClass: 'custom-dialog-container'\r\n        });\r\n    }\r\n\r\n    getEmpresas() {\r\n        this.subcription$ = this.empresaClienteService.getEmpresas().pipe(\r\n            map((response) => {\r\n                response.data.forEach((items) => {\r\n                    if (items.estado) {\r\n                        items.estado = Estados.ACTIVO;\r\n                    }else {\r\n                        items.estado = Estados.INACTIVO;\r\n                    }\r\n                })\r\n                return response;\r\n\r\n            })\r\n        ).subscribe((response) => {\r\n            this.data = response.data;\r\n        })\r\n    }\r\n\r\n    private listenGrid() {\r\n        const refreshData$ = this.estadoDatosService.stateGrid.asObservable();\r\n\r\n        refreshData$.subscribe((state) => {\r\n            if (state) {\r\n                this.getEmpresas();\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    onSearch(event: Event) {\r\n        const target = event.target as HTMLInputElement;\r\n        this.searchTerm = target.value.trim().toLowerCase();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subcription$.unsubscribe();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getEmpresas();\r\n        this.listenGrid();\r\n    }\r\n\r\n}\r\n","<div\r\n    class=\"bg-card flex min-w-0 flex-auto flex-col dark:bg-transparent sm:absolute sm:inset-0 sm:overflow-hidden\"\r\n>\r\n    <div\r\n        class=\"relative flex flex-0 flex-col border-b px-6 py-8 sm:flex-row sm:items-center sm:justify-between md:px-8\"\r\n    >\r\n        <!-- Title -->\r\n        <div class=\"text-3xl font-semibold tracking-tight\">Clientes - Aliados</div>\r\n\r\n        <!-- Actions -->\r\n        <div class=\"mt-6 flex w-full shrink-0 flex-col items-center sm:ml-4 sm:mt-0 sm:flex-row sm:space-x-2 sm:w-auto\">\r\n            <!-- Search -->\r\n            <mat-form-field\r\n                class=\"fuse-mat-dense rounded-lg w-full sm:w-auto min-w-64\"\r\n                [subscriptSizing]=\"'dynamic'\"\r\n            >\r\n                <mat-icon\r\n                    class=\"icon-size-5\"\r\n                    matPrefix\r\n                    [svgIcon]=\"'heroicons_solid:magnifying-glass'\"\r\n                ></mat-icon>\r\n                <input\r\n                    matInput\r\n                    [autocomplete]=\"'off'\"\r\n                    [placeholder]=\"'Buscar'\"\r\n                    (input)=\"onSearch($event)\"\r\n                />\r\n            </mat-form-field>\r\n            <!-- Add product button -->\r\n            <button\r\n                class=\"mt-2 w-full bg-crediblue-50 rounded-lg transition duration-200 text-white font-semibold sm:ml-4 sm:mt-0 sm:w-auto\"\r\n                mat-flat-button\r\n                [color]=\"'primary'\"\r\n                (click)=\"onNew()\"\r\n            >\r\n                <mat-icon [svgIcon]=\"'heroicons_outline:plus'\"></mat-icon>\r\n                <span class=\"ml-2 mr-1\">Agregar</span>\r\n            </button>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <!--Main-->\r\n    <div class=\"flex flex-auto overflow-hidden\">\r\n        <!-- Products list -->\r\n        <div\r\n            class=\"flex flex-auto flex-col overflow-hidden sm:mb-18 sm:overflow-y-auto\"\r\n        >\r\n            <app-custom-table\r\n                [columns]=\"columns\"\r\n                [displayedColumns]=\"columns\"\r\n                [columnPropertyMap]=\"columnPropertyMap\"\r\n                [data]=\"data\"\r\n                [buttons]=\"buttons\"\r\n                [searchTerm]=\"searchTerm\"\r\n            ></app-custom-table>\r\n        </div>\r\n    </div>\r\n\r\n\r\n</div>\r\n","import { Routes } from '@angular/router';\r\nimport { GridEmpresasClientesComponent } from './grid-empresas-clientes/grid-empresas-clientes.component';\r\n\r\nexport default [\r\n    {\r\n        path: '',\r\n        component: GridEmpresasClientesComponent\r\n    }\r\n\r\n] as Routes\r\n"],"mappings":"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","names":[],"x_google_ignoreList":[1,2,3,4]}