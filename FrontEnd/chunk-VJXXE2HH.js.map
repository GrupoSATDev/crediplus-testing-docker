{
  "version": 3,
  "sources": ["src/app/core/services/tipo-usuarios.service.ts", "src/app/core/services/roles.service.ts", "src/app/pages/seguridad/usuarios-empresas/form-usuarios-empresas/form-usuarios-empresas.component.ts", "src/app/pages/seguridad/usuarios-empresas/form-usuarios-empresas/form-usuarios-empresas.component.html", "src/app/core/enums/codigos-usuarios.ts", "src/app/pages/seguridad/usuarios-empresas/grid-usuarios-empresas/grid-usuarios-empresas.component.ts", "src/app/pages/seguridad/usuarios-empresas/grid-usuarios-empresas/grid-usuarios-empresas.component.html", "src/app/pages/seguridad/usuarios-empresas/usuarios-empresas.routes.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AppSettingsService } from '../app-config/app-settings-service';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TipoUsuariosService {\r\n\r\n  constructor(\r\n      private _http: HttpClient,\r\n      private appSettingService: AppSettingsService\r\n  ) { }\r\n\r\n    getTipoUsuarios():  Observable<any> {\r\n        return this._http.get(`${this.appSettingService.tipoUsuarios.url.base}`)\r\n    }\r\n}\r\n", "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AppSettingsService } from '../app-config/app-settings-service';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RolesService {\r\n\r\n  constructor(\r\n      private _http: HttpClient,\r\n      private appSettingService: AppSettingsService\r\n  ) { }\r\n\r\n    getRoles(): Observable<any> {\r\n        return this._http.get(`${this.appSettingService.roles.url.base}`)\r\n    }\r\n\r\n}\r\n", "import { Component, DestroyRef, inject, OnInit } from '@angular/core';\r\nimport {\r\n    AbstractControl,\r\n    FormBuilder,\r\n    FormGroup,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    ValidatorFn,\r\n    Validators,\r\n} from '@angular/forms';\r\nimport { MatError, MatFormField, MatLabel } from '@angular/material/form-field';\r\nimport { MatInput } from '@angular/material/input';\r\nimport { AsyncPipe, NgForOf, NgIf } from '@angular/common';\r\nimport { MatOption, MatSelect, MatSelectChange } from '@angular/material/select';\r\nimport { MatButton, MatIconButton } from '@angular/material/button';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { FuseConfirmationService } from '../../../../../@fuse/services/confirmation';\r\nimport { EstadosDatosService } from '../../../../core/services/estados-datos.service';\r\nimport { map, Observable, tap } from 'rxjs';\r\nimport { LocacionService } from '../../../../core/services/locacion.service';\r\nimport { UsuariosService } from '../../../../core/services/usuarios.service';\r\nimport { TipoUsuariosService } from '../../../../core/services/tipo-usuarios.service';\r\nimport { RolesService } from '../../../../core/services/roles.service';\r\nimport { EmpresasClientesService } from '../../../../core/services/empresas-clientes.service';\r\nimport { guardar } from '../../../../core/constant/dialogs';\r\nimport { SwalService } from '../../../../core/services/swal.service';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { MatSlideToggle } from '@angular/material/slide-toggle';\r\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\r\n\r\n@Component({\r\n  selector: 'app-form-usuarios-empresas',\r\n  standalone: true,\r\n    imports: [\r\n        FormsModule,\r\n        MatFormField,\r\n        MatInput,\r\n        MatLabel,\r\n        ReactiveFormsModule,\r\n        AsyncPipe,\r\n        MatOption,\r\n        MatSelect,\r\n        NgForOf,\r\n        NgIf,\r\n        MatButton,\r\n        MatIcon,\r\n        MatIconButton,\r\n        MatError,\r\n        MatSlideToggle,\r\n    ],\r\n  templateUrl: './form-usuarios-empresas.component.html',\r\n  styleUrl: './form-usuarios-empresas.component.scss'\r\n})\r\nexport class FormUsuariosEmpresasComponent  implements OnInit{\r\n    private fb = inject(FormBuilder);\r\n    public form: FormGroup;\r\n    private _locacionService = inject(LocacionService);\r\n    public dialogRef = inject(MatDialogRef<FormUsuariosEmpresasComponent>);\r\n    public fuseService = inject(FuseConfirmationService);\r\n    public estadosDatosService = inject(EstadosDatosService);\r\n    public usuariosService = inject(UsuariosService);\r\n    public tipoUsuariosService = inject(TipoUsuariosService);\r\n    public empresaClienteService = inject(EmpresasClientesService);\r\n    public rolesService = inject(RolesService);\r\n    public municipios$: Observable<any>;\r\n    public _matData = inject(MAT_DIALOG_DATA);\r\n    private swalService = inject(SwalService);\r\n    private readonly destroyedRef = inject(DestroyRef);\r\n\r\n    onSelected(matSelectChange: MatSelectChange) {\r\n        const id = matSelectChange.value;\r\n        this.getMunicipios(id);\r\n    }\r\n\r\n    public departamentos$ = this._locacionService.getDepartamentos().pipe(\r\n        tap((response) => {\r\n            const valorSelected = response.data;\r\n            const dialogData = this._matData;\r\n            if (valorSelected && !dialogData.edit) {\r\n                this.form.get('idDepartamento').setValue(valorSelected[0].id)\r\n                const idDepto = this.form.get('idDepartamento').value;\r\n                this.getMunicipios(idDepto);\r\n            }\r\n        })\r\n    );\r\n\r\n    public tipoUsuarios$ = this.tipoUsuariosService.getTipoUsuarios().pipe(\r\n        map((response) => {\r\n            response.data = response.data.filter((res) => res.nombre !== 'Trabajador');\r\n            return response;\r\n        }),\r\n        tap((response) => {\r\n            const valorSelected = response.data;\r\n            const dialogData = this._matData;\r\n            if (valorSelected && !dialogData.edit) {\r\n                this.form.get('idTipoUsuario').setValue(valorSelected[0].id)\r\n            }\r\n        })\r\n    );\r\n\r\n    public roles$ = this.rolesService.getRoles().pipe(\r\n        tap((response) => {\r\n            const valorSelected = response.data;\r\n            const dialogData = this._matData;\r\n            if (valorSelected && !dialogData.edit) {\r\n                this.form.get('idRol').setValue(valorSelected[0].id)\r\n            }\r\n        })\r\n    );\r\n\r\n    public empresas$ = this.empresaClienteService.getEmpresasClientesSelect().pipe(\r\n        tap((response) => {\r\n            const valorSelected = response.data;\r\n            const dialogData = this._matData;\r\n            if (valorSelected && !dialogData.edit) {\r\n                this.form.get('idSubEmpresa').setValue(valorSelected[0].id)\r\n            }\r\n        })\r\n    );\r\n\r\n    getMunicipios(id) {\r\n        this.municipios$ = this._locacionService.getMunicipio(id).pipe(\r\n            tap((response) => {\r\n                const valorSelected = response.data;\r\n                const dialogData = this._matData;\r\n                if (valorSelected && !dialogData.edit) {\r\n                    this.form.get('idMunicipio').setValue(valorSelected[0].id)\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.createForm();\r\n        const dialogData = this._matData;\r\n        if (dialogData.edit) {\r\n            const data = dialogData.data;\r\n            this.getUsuario(data.id)\r\n            this.form.get('estadoContrasena').valueChanges.pipe(\r\n                takeUntilDestroyed(this.destroyedRef)\r\n            ).subscribe((response) => {\r\n                if (response) {\r\n                    this.form.get('contrasena').setValidators([Validators.required, Validators.minLength(5), Validators.maxLength(20)]);\r\n                    this.form.get('confirmaContrasena').setValidators([Validators.required, Validators.minLength(5), Validators.maxLength(20)]);\r\n                    this.form.get('contrasena').updateValueAndValidity()\r\n                    this.form.get('confirmaContrasena').updateValueAndValidity()\r\n                }else {\r\n                    this.form.get('contrasena').removeValidators([Validators.required]);\r\n                    this.form.get('confirmaContrasena').removeValidators([Validators.required]);\r\n                    this.form.get('contrasena').setValue('');\r\n                    this.form.get('confirmaContrasena').setValue('');\r\n                    this.form.get('contrasena').updateValueAndValidity()\r\n                    this.form.get('confirmaContrasena').updateValueAndValidity()\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    private createForm() {\r\n        this.form = this.fb.group({\r\n            id: [null],\r\n            nombre: ['', [Validators.required]],\r\n            apellido: ['', [Validators.required]],\r\n            correo: ['', [Validators.required]],\r\n            contrasena: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(20)]],\r\n            confirmaContrasena: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(20)]],\r\n            idRol: [''],\r\n            idSubEmpresa: [''],\r\n            idTipoUsuario: [''],\r\n            idDepartamento: [''],\r\n            idMunicipio: [''],\r\n            estado: [true],\r\n            estadoContrasena: [true]\r\n        },\r\n            { validators: passwordMatchValidator('contrasena', 'confirmaContrasena') })\r\n    }\r\n\r\n    onSave() {\r\n        if (this.form.valid) {\r\n            if (!this._matData.edit) {\r\n                const data = this.form.getRawValue();\r\n                const {idDepartamento, confirmaContrasena, estadoContrasena,  ...form} = data;\r\n                const dialog = this.fuseService.open({\r\n                    ...guardar\r\n                });\r\n\r\n                dialog.afterClosed().subscribe((response) => {\r\n\r\n                    if (response === 'confirmed') {\r\n                        this.usuariosService.postUsuarios(form).subscribe((res) => {\r\n                            console.log(res)\r\n                            this.estadosDatosService.stateGrid.next(true);\r\n                            this.swalService.ToastAler({\r\n                                icon: 'success',\r\n                                title: 'Registro Creado o Actualizado con Exito.',\r\n                                timer: 4000,\r\n                            })\r\n                            this.closeDialog();\r\n                        }, error => {\r\n                            this.swalService.ToastAler({\r\n                                icon: 'error',\r\n                                title: 'Ha ocurrido un error al crear el registro!',\r\n                                timer: 4000,\r\n                            })\r\n                        })\r\n                    }else {\r\n                        this.closeDialog();\r\n                    }\r\n                })\r\n            }else {\r\n                const data = this.form.getRawValue();\r\n                const {idDepartamento, confirmaContrasena, estadoContrasena, ...form} = data;\r\n                const dialog = this.fuseService.open({\r\n                    ...guardar\r\n                });\r\n\r\n                dialog.afterClosed().subscribe((response) => {\r\n\r\n                    if (response === 'confirmed') {\r\n                        this.usuariosService.putUsuario(form).subscribe((res) => {\r\n                            this.estadosDatosService.stateGrid.next(true);\r\n                            this.swalService.ToastAler({\r\n                                icon: 'success',\r\n                                title: 'Registro Creado o Actualizado con Exito.',\r\n                                timer: 4000,\r\n                            })\r\n                            this.closeDialog();\r\n                        }, error => {\r\n                            this.swalService.ToastAler({\r\n                                icon: 'error',\r\n                                title: 'Ha ocurrido un error al crear el registro!',\r\n                                timer: 4000,\r\n                            })\r\n                        })\r\n                    }else {\r\n                        this.closeDialog();\r\n                    }\r\n                })\r\n\r\n            }\r\n        } else {\r\n            this.form.markAllAsTouched();\r\n        }\r\n\r\n    }\r\n\r\n    private getUsuario(id) {\r\n        this.usuariosService.getUsuario(id).subscribe((response) => {\r\n            if (response) {\r\n                console.log(response.data)\r\n                const { idDepartamento, ...data } = response.data;\r\n                this.form.patchValue({\r\n                    idDepartamento,\r\n                    ...data,\r\n                })\r\n                this.municipios$ = this._locacionService.getMunicipio(idDepartamento);\r\n            }\r\n        })\r\n    }\r\n\r\n    public isEditContrasena(estado) {\r\n\r\n    }\r\n\r\n    closeDialog() {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n}\r\n\r\nexport function passwordMatchValidator(controlName: string, matchingControlName: string): ValidatorFn {\r\n    return (formGroup: AbstractControl) => {\r\n        const control = formGroup.get(controlName);\r\n        const matchingControl = formGroup.get(matchingControlName);\r\n\r\n        if (matchingControl?.errors && !matchingControl.errors['passwordMismatchError']) {\r\n            return null; // Return if another validator has already found an error\r\n        }\r\n\r\n        // Set error on matchingControl if validation fails\r\n        if (control?.value !== matchingControl?.value) {\r\n            matchingControl?.setErrors({ passwordMismatchError: true });\r\n        } else {\r\n            matchingControl?.setErrors(null);\r\n        }\r\n        return null;\r\n    };\r\n}\r\n", "<div class=\"w-full sm:bg-card sm:rounded-2xl sm:mx-0 mx-auto\" >\r\n    <div class=\"\">\r\n        <!-- Title -->\r\n        <div\r\n            class=\"mt-8 text-3xl font-semibold leading-tight tracking-tight text-center\"\r\n        >\r\n            {{_matData.edit ? 'Actualizar usuario' : 'Agregar usuario'}}\r\n        </div>\r\n\r\n        <form class=\"mt-8\" [formGroup]=\"form\">\r\n            @if(_matData.edit) {\r\n                <div class=\"flex mb-4\">\r\n                    <div\r\n                        class=\"fcursor-pointer\"\r\n                        (click)=\"twoStepToggle.toggle()\"\r\n                    >\r\n                        <div class=\"font-medium leading-6\">\r\n                            Estado {{form.get('estado').value ? 'Activo' : 'Inactivo'}}\r\n                        </div>\r\n                    </div>\r\n                    <mat-slide-toggle\r\n                        class=\"ml-4\"\r\n                        [color]=\"'primary'\"\r\n                        [formControlName]=\"'estado'\"\r\n                        #twoStepToggle\r\n                    >\r\n                    </mat-slide-toggle>\r\n                </div>\r\n            }\r\n            <div class=\"flex flex-col lg:flex-row mb-4 gap-2\">\r\n                <!-- Name field -->\r\n                <mat-form-field class=\"w-full\" floatLabel=\"always\">\r\n                    <mat-label>Nombre</mat-label>\r\n                    <input  matInput [formControlName]=\"'nombre'\" placeholder=\"Nombre\"/>\r\n                </mat-form-field>\r\n\r\n                <!-- Email field -->\r\n                <mat-form-field class=\"w-full\" floatLabel=\"always\">\r\n                    <mat-label>Apellido</mat-label>\r\n                    <input matInput [formControlName]=\"'apellido'\" placeholder=\"Apellido\"/>\r\n                </mat-form-field>\r\n            </div>\r\n\r\n            <div class=\"flex flex-col lg:flex-row mb-4 gap-2\">\r\n\r\n                <mat-form-field  class=\"w-full\" floatLabel=\"always\">\r\n                    <mat-label>Tipo de usuario</mat-label>\r\n                    <mat-select\r\n                        #data\r\n                        [formControlName]=\"'idTipoUsuario'\"\r\n                        placeholder=\"Tipo de usuario\"\r\n                    >\r\n                        <ng-container *ngIf=\"tipoUsuarios$ | async as tipoUsuarios\">\r\n                            <mat-option [value]=\"tipoUsuario.id\" *ngFor=\"let tipoUsuario of tipoUsuarios.data\">{{tipoUsuario.nombre}}</mat-option>\r\n                        </ng-container>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n\r\n                <!-- Name field -->\r\n                <mat-form-field class=\"w-full\" floatLabel=\"always\">\r\n                    <mat-label>Correo</mat-label>\r\n                    <input id=\"nit\" matInput [formControlName]=\"'correo'\" placeholder=\"Correo\"/>\r\n                </mat-form-field>\r\n\r\n            </div>\r\n\r\n            <div class=\"flex flex-col lg:flex-row mb-4 gap-2\">\r\n                @if(_matData.edit) {\r\n                    <div class=\"flex mb-4\">\r\n                        <div\r\n                            class=\"fcursor-pointer\"\r\n                            (click)=\"twoStepToggle.toggle()\"\r\n                        >\r\n                            <div class=\"font-medium leading-6\">\r\n                                Establecer nueva contraseña ? {{form.get('estadoContrasena').value ? 'Si' : 'No'}}\r\n                            </div>\r\n                        </div>\r\n                        <mat-slide-toggle\r\n                            class=\"ml-4\"\r\n                            [color]=\"'primary'\"\r\n                            #twoStepToggle\r\n                            [formControlName]=\"'estadoContrasena'\"\r\n                        >\r\n                        </mat-slide-toggle>\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n\r\n            @if (form.get('estadoContrasena').value) {\r\n                <div class=\"flex flex-col lg:flex-row mb-4 gap-2\">\r\n                    <!-- Password field -->\r\n                    <mat-form-field class=\"w-full\" floatLabel=\"always\">\r\n                        <mat-label>Contraseña</mat-label>\r\n                        <input\r\n                            id=\"contrasena\"\r\n                            matInput\r\n                            type=\"password\"\r\n                            [formControlName]=\"'contrasena'\"\r\n                            #passwordField\r\n                            placeholder=\"Contraseña\"\r\n                        />\r\n                        <button\r\n                            mat-icon-button\r\n                            type=\"button\"\r\n                            (click)=\"\r\n                                passwordField.type === 'password'\r\n                                    ? (passwordField.type = 'text')\r\n                                    : (passwordField.type = 'password')\r\n                            \"\r\n                            matSuffix\r\n                        >\r\n                            @if (passwordField.type === 'password') {\r\n                                <mat-icon\r\n                                    class=\"icon-size-5\"\r\n                                    [svgIcon]=\"'heroicons_solid:eye'\"\r\n                                ></mat-icon>\r\n                            }\r\n                            @if (passwordField.type === 'text') {\r\n                                <mat-icon\r\n                                    class=\"icon-size-5\"\r\n                                    [svgIcon]=\"'heroicons_solid:eye-slash'\"\r\n                                ></mat-icon>\r\n                            }\r\n                        </button>\r\n                        @if (form.get('contrasena').dirty || form.get('contrasena').touched) {\r\n                            <mat-error>\r\n                                @if (form.get('contrasena').hasError('required')) {\r\n                                    La contraseña es requerida!.\r\n                                }\r\n                                @if (form.get('contrasena').hasError('minlength')) {\r\n                                    El mínimo de caracteres son 5.\r\n                                }\r\n                                @if (form.get('contrasena').hasError('maxlength')) {\r\n                                    El maximo de caracteres son 20.\r\n                                }\r\n                            </mat-error>\r\n                        }\r\n                    </mat-form-field> <!-- Password field -->\r\n\r\n                    <mat-form-field class=\"w-full\" floatLabel=\"always\">\r\n                        <mat-label>Confirmar contraseña</mat-label>\r\n                        <input\r\n                            id=\"confirmaContrasena\"\r\n                            matInput\r\n                            type=\"password\"\r\n                            [formControlName]=\"'confirmaContrasena'\"\r\n                            #passwordConfirm\r\n                            placeholder=\"Confirmar contraseña\"\r\n                        />\r\n                        <button\r\n                            mat-icon-button\r\n                            type=\"button\"\r\n                            (click)=\"\r\n                                passwordConfirm.type === 'password'\r\n                                    ? (passwordConfirm.type = 'text')\r\n                                    : (passwordConfirm.type = 'password')\r\n                            \"\r\n                            matSuffix\r\n                        >\r\n                            @if (passwordConfirm.type === 'password') {\r\n                                <mat-icon\r\n                                    class=\"icon-size-5\"\r\n                                    [svgIcon]=\"'heroicons_solid:eye'\"\r\n                                ></mat-icon>\r\n                            }\r\n                            @if (passwordConfirm.type === 'text') {\r\n                                <mat-icon\r\n                                    class=\"icon-size-5\"\r\n                                    [svgIcon]=\"'heroicons_solid:eye-slash'\"\r\n                                ></mat-icon>\r\n                            }\r\n                        </button>\r\n                        @if (form.get('confirmaContrasena').dirty || form.get('confirmaContrasena').touched) {\r\n                            <mat-error>\r\n                                @if (form.get('confirmaContrasena').hasError('required')) {\r\n                                    La confirmación de contraseña es requerida!.\r\n                                }\r\n                                @if (form.get('confirmaContrasena').hasError('minlength')) {\r\n                                    El mínimo de caracteres son 5.\r\n                                }\r\n                                @if (form.get('confirmaContrasena').hasError('maxlength')) {\r\n                                    El maximo de caracteres son 20.\r\n                                }\r\n                                @if (form.get('confirmaContrasena').hasError('passwordMismatchError')) {\r\n                                    Las contraseñas no coinciden!\r\n                                }\r\n                            </mat-error>\r\n                        }\r\n                    </mat-form-field>\r\n                </div>\r\n            }\r\n\r\n            <div class=\"flex flex-col lg:flex-row mb-4 gap-2\">\r\n                <!-- Name field -->\r\n                <mat-form-field  class=\"w-full\" floatLabel=\"always\">\r\n                    <mat-label>Rol</mat-label>\r\n                    <mat-select\r\n                        #data\r\n                        [formControlName]=\"'idRol'\"\r\n                        placeholder=\"Rol\"\r\n                    >\r\n                        <ng-container *ngIf=\"roles$ | async as roles\">\r\n                            <mat-option [value]=\"rol.id\" *ngFor=\"let rol of roles.data\">{{rol.nombre}}</mat-option>\r\n                        </ng-container>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n\r\n                <!-- Email field -->\r\n                <mat-form-field  class=\"w-full\" floatLabel=\"always\">\r\n                    <mat-label>Empresa</mat-label>\r\n                    <mat-select\r\n                        [formControlName]=\"'idSubEmpresa'\"\r\n                        placeholder=\"Empresa\"\r\n                    >\r\n                        <ng-container *ngIf=\"empresas$ | async as empresas\">\r\n                            <mat-option [value]=\"empresa.id\" *ngFor=\"let empresa of empresas.data\">{{empresa.razonSocial}}</mat-option>\r\n                        </ng-container>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n            </div>\r\n\r\n            <div class=\"flex flex-col lg:flex-row mb-4 gap-2\">\r\n\r\n                <mat-form-field  class=\"w-full\" floatLabel=\"always\">\r\n                    <mat-label>Departamento</mat-label>\r\n                    <mat-select\r\n                        #data\r\n                        (selectionChange)=\"onSelected($event)\"\r\n                        [formControlName]=\"'idDepartamento'\"\r\n                        placeholder=\"Departamento\"\r\n                    >\r\n                        <ng-container *ngIf=\"departamentos$ | async as departamentos\">\r\n                            <mat-option [value]=\"departamento.id\" *ngFor=\"let departamento of departamentos.data\">{{departamento.nombre}}</mat-option>\r\n                        </ng-container>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field  class=\"w-full\" floatLabel=\"always\">\r\n                    <mat-label>Ciudad</mat-label>\r\n                    <mat-select [formControlName]=\"'idMunicipio'\" placeholder=\"Ciudad\">\r\n                        <ng-container *ngIf=\"municipios$ | async as municipios\">\r\n                            <mat-option [value]=\"municipio.id\" *ngFor=\"let municipio of municipios.data\">{{municipio.nombre}}</mat-option>\r\n                        </ng-container>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n\r\n            </div>\r\n\r\n            <!-- Submit button -->\r\n            <div class=\"flex flex-wrap justify-end gap-2.5 \">\r\n                <button\r\n                    class=\"lg:w-auto w-full lg:mt-6 bg-credigray-100 rounded-lg transition duration-200 text-white font-semibold\"\r\n                    mat-flat-button\r\n                    [color]=\"'primary'\"\r\n                    (click)=\"closeDialog()\"\r\n                >\r\n\r\n                    <span> Cancelar </span>\r\n                </button>\r\n\r\n                <button\r\n                    class=\"lg:w-auto w-full lg:mt-6 bg-crediblue-50 rounded-lg transition duration-200 text-white font-semibold\"\r\n                    mat-flat-button\r\n                    [color]=\"'primary'\"\r\n                    (click)=\"onSave()\"\r\n                >\r\n\r\n                    <span> {{_matData.edit ? 'Actualizar' : 'Guardar'}} </span>\r\n                </button>\r\n\r\n            </div>\r\n\r\n        </form>\r\n\r\n    </div>\r\n\r\n</div>\r\n", "export enum CodigosUsuarios {\r\n    TRABAJADORES = 'e626ea69-e995-4462-be9a-905326714781',\r\n    USUARIOS = 'e626ea69-e995-4462-be9a-905326714793'\r\n}\r\n", "import { Component, inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { CustomTableComponent } from '../../../shared/custom-table/custom-table.component';\r\nimport { MatButton } from '@angular/material/button';\r\nimport { MatFormField } from '@angular/material/form-field';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { MatInput } from '@angular/material/input';\r\nimport { map, Subscription } from 'rxjs';\r\nimport { IButton } from '../../../shared/interfaces/buttonsInterfaces';\r\nimport { FormUsuariosEmpresasComponent } from '../form-usuarios-empresas/form-usuarios-empresas.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { EstadosDatosService } from '../../../../core/services/estados-datos.service';\r\nimport { GenerosService } from '../../../../core/services/generos.service';\r\nimport { UsuariosService } from '../../../../core/services/usuarios.service';\r\nimport { Estados } from '../../../../core/enums/estados';\r\nimport { MatTab, MatTabChangeEvent, MatTabContent, MatTabGroup } from '@angular/material/tabs';\r\nimport { FuseAlertComponent } from '../../../../../@fuse/components/alert';\r\nimport { NgIf } from '@angular/common';\r\nimport { CodigosUsuarios } from '../../../../core/enums/codigos-usuarios';\r\n\r\n@Component({\r\n  selector: 'app-grid-usuarios-empresas',\r\n  standalone: true,\r\n    imports: [\r\n        CustomTableComponent,\r\n        MatButton,\r\n        MatFormField,\r\n        MatIcon,\r\n        MatInput,\r\n        MatTabGroup,\r\n        FuseAlertComponent,\r\n        MatTab,\r\n        MatTabContent,\r\n        NgIf,\r\n    ],\r\n  templateUrl: './grid-usuarios-empresas.component.html',\r\n  styleUrl: './grid-usuarios-empresas.component.scss'\r\n})\r\nexport class GridUsuariosEmpresasComponent implements  OnInit, OnDestroy{\r\n    private usuariosService = inject(UsuariosService);\r\n    public subcription$: Subscription;\r\n    public selectedData: any;\r\n    public searchTerm: string = '';\r\n    private selectedTab: any = CodigosUsuarios.USUARIOS;\r\n    public tabIndex ;\r\n\r\n    data = [];\r\n\r\n    columns = ['Usuario', 'Nombre completo', 'Rol', 'Tipo de usuario', 'Estado'];\r\n    columnPropertyMap = {\r\n        'Usuario': 'correo',\r\n        'Nombre completo': 'nombreCompleto',\r\n        'Rol': 'nombreRol',\r\n        'Tipo de usuario': 'nombreTipoUsuario',\r\n        'Estado': 'estado'\r\n    };\r\n\r\n    buttons: IButton[] = [\r\n        {\r\n            label: 'Edición',\r\n            icon: 'edit',\r\n            action: (element) => {\r\n                console.log('Editing', element);\r\n                this.selectedData = element;\r\n                this.onEdit();\r\n            }\r\n        },\r\n    ];\r\n\r\n    constructor(\r\n        private _matDialog: MatDialog,\r\n        private estadoDatosService: EstadosDatosService,\r\n        private generoService: GenerosService\r\n    ) {\r\n    }\r\n\r\n    tabChanged = (tabChangeEvent: MatTabChangeEvent): void => {\r\n        this.tabIndex = tabChangeEvent.index;\r\n        this.selectedTab = tabChangeEvent.index == 0 ? CodigosUsuarios.USUARIOS : CodigosUsuarios.TRABAJADORES;\r\n\r\n        this.getUsuarios(this.selectedTab);\r\n\r\n\r\n    }\r\n\r\n    onNew() {\r\n        this._matDialog.open(FormUsuariosEmpresasComponent, {\r\n            autoFocus: false,\r\n            data: {\r\n                edit: false,\r\n            },\r\n            maxHeight: '90vh',\r\n            disableClose: true,\r\n            panelClass: 'custom-dialog-container'\r\n        })\r\n    }\r\n\r\n    onEdit(): void {\r\n        this._matDialog.open(FormUsuariosEmpresasComponent, {\r\n            autoFocus: false,\r\n            data: {\r\n                edit: true,\r\n                data: this.selectedData\r\n            },\r\n            maxHeight: '90vh',\r\n            disableClose: true,\r\n            panelClass: 'custom-dialog-container'\r\n        })\r\n    }\r\n\r\n    onSearch(event: Event) {\r\n        const target = event.target as HTMLInputElement;\r\n        this.searchTerm = target.value.trim().toLowerCase();\r\n    }\r\n\r\n    getUsuarios(params): void {\r\n        this.subcription$ = this.usuariosService.getUsuarios(params).pipe(\r\n            map((response) => {\r\n                response.data.forEach((items) => {\r\n                    if (items.estado) {\r\n                        items.estado = Estados.ACTIVO;\r\n                    }else {\r\n                        items.estado = Estados.INACTIVO;\r\n                    }\r\n                })\r\n                return response;\r\n            }),\r\n            map((response) => {\r\n                response.data.forEach((items) => {\r\n                    if (items) {\r\n                        items.nombreCompleto = items.nombre.concat(' ',items.apellido );\r\n                    }\r\n                })\r\n                return response;\r\n            })\r\n        ).subscribe((response) => {\r\n            if (response.data) {\r\n                this.data = response.data;\r\n\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.getUsuarios(this.selectedTab);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subcription$.unsubscribe();\r\n    }\r\n\r\n\r\n}\r\n", "<div\r\n    class=\"bg-card flex min-w-0 flex-auto flex-col dark:bg-transparent sm:absolute sm:inset-0 sm:overflow-hidden\"\r\n>\r\n    <div\r\n        class=\"relative flex flex-0 flex-col border-b px-6 py-8 sm:flex-row sm:items-center sm:justify-between md:px-8\"\r\n    >\r\n        <!-- Title -->\r\n        <div class=\"text-3xl font-semibold tracking-tight\">Usuarios</div>\r\n\r\n        <!-- Actions -->\r\n        <div class=\"mt-6 flex w-full shrink-0 flex-col items-center sm:ml-4 sm:mt-0 sm:flex-row sm:space-x-2 sm:w-auto\">\r\n            <!-- Search -->\r\n            <mat-form-field\r\n                class=\"fuse-mat-dense rounded-lg w-full sm:w-auto min-w-64\"\r\n                [subscriptSizing]=\"'dynamic'\"\r\n            >\r\n                <mat-icon\r\n                    class=\"icon-size-5\"\r\n                    matPrefix\r\n                    [svgIcon]=\"'heroicons_solid:magnifying-glass'\"\r\n                ></mat-icon>\r\n                <input\r\n                    matInput\r\n                    [autocomplete]=\"'off'\"\r\n                    [placeholder]=\"'Buscar'\"\r\n                    (input)=\"onSearch($event)\"\r\n                />\r\n            </mat-form-field>\r\n            <!-- Add product button -->\r\n            <button\r\n                class=\"mt-2 w-full bg-crediblue-50 rounded-lg transition duration-200 text-white font-semibold sm:ml-4 sm:mt-0 sm:w-auto\"\r\n                mat-flat-button\r\n                [color]=\"'primary'\"\r\n                (click)=\"onNew()\"\r\n            >\r\n                <mat-icon [svgIcon]=\"'heroicons_outline:plus'\"></mat-icon>\r\n                <span class=\"ml-2 mr-1\">Agregar</span>\r\n            </button>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <!--Main-->\r\n    <div class=\"flex flex-auto overflow-hidden\">\r\n        <!-- Products list -->\r\n        <div\r\n            class=\"flex flex-auto flex-col overflow-hidden sm:mb-18 sm:overflow-y-auto\"\r\n        >\r\n            <mat-tab-group\r\n                class=\"sm:px-2\"\r\n                mat-stretch-tabs=\"false\"\r\n                [animationDuration]=\"'500'\"\r\n                [(selectedIndex)]=\"tabIndex\"\r\n                #tabGroup (selectedTabChange)=\"tabChanged($event)\"\r\n            >\r\n                <mat-tab label=\"Usuarios del sistema\">\r\n                    <ng-template matTabContent>\r\n                        <ng-container *ngIf=\"data.length; else noData\">\r\n                            <app-custom-table\r\n                                [columns]=\"columns\"\r\n                                [displayedColumns]=\"columns\"\r\n                                [columnPropertyMap]=\"columnPropertyMap\"\r\n                                [data]=\"data\"\r\n                                [buttons]=\"buttons\"\r\n                                [searchTerm]=\"searchTerm\"\r\n                            ></app-custom-table>\r\n                        </ng-container>\r\n                        <ng-template #noData>\r\n                            <div class=\"inset-0 min-w-0 overflow-auto print:overflow-visible\">\r\n\r\n                                <div class=\"inline-block p-4 sm:p-2 print:p-0 w-full\">\r\n                                    <fuse-alert\r\n                                        [type]=\"'info'\"\r\n                                        [appearance]=\"'outline'\">\r\n                                        <span fuseAlertTitle>Información</span>\r\n                                        No hay usuarios hasta el momento.\r\n                                    </fuse-alert>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </ng-template>\r\n                    </ng-template>\r\n                </mat-tab>\r\n                <mat-tab label=\"Trabajadores\">\r\n                    <ng-template matTabContent>\r\n                        <ng-container *ngIf=\"data.length; else noData\">\r\n                            <app-custom-table\r\n                                [columns]=\"columns\"\r\n                                [displayedColumns]=\"columns\"\r\n                                [columnPropertyMap]=\"columnPropertyMap\"\r\n                                [data]=\"data\"\r\n                                [buttons]=\"buttons\"\r\n                                [searchTerm]=\"searchTerm\"\r\n                            ></app-custom-table>\r\n                        </ng-container>\r\n                        <ng-template #noData>\r\n                            <div class=\"inset-0 min-w-0 overflow-auto print:overflow-visible\">\r\n\r\n                                <div class=\"inline-block p-4 sm:p-2 print:p-0 w-full\">\r\n                                    <fuse-alert\r\n                                        [type]=\"'info'\"\r\n                                        [appearance]=\"'outline'\">\r\n                                        <span fuseAlertTitle>Información</span>\r\n                                        No hay usuarios hasta el momento.\r\n                                    </fuse-alert>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </ng-template>\r\n                    </ng-template>\r\n                </mat-tab>\r\n            </mat-tab-group>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>\r\n\r\n", "import { Routes } from '@angular/router';\r\nimport { GridUsuariosEmpresasComponent } from './grid-usuarios-empresas/grid-usuarios-empresas.component';\r\n\r\nexport default [\r\n    {\r\n        path: '',\r\n        component: GridUsuariosEmpresasComponent\r\n    }\r\n\r\n]as Routes;\r\n"],
  "mappings": "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",
  "names": ["CodigosUsuarios"]
}
