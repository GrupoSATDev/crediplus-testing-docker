{"version":3,"sources":["src/app/core/auth/auth.utils.ts","src/app/core/user/user.service.ts","node_modules/jwt-decode/build/esm/index.js","src/app/pages/shared/tokenrenewaldialog/tokenrenewaldialog.component.ts","src/app/pages/shared/tokenrenewaldialog/tokenrenewaldialog.component.html","src/app/core/auth/auth.service.ts"],"sourcesContent":["// -----------------------------------------------------------------------------------------------------\r\n// @ AUTH UTILITIES\r\n//\r\n// Methods are derivations of the Auth0 Angular-JWT helper service methods\r\n// https://github.com/auth0/angular2-jwt\r\n// -----------------------------------------------------------------------------------------------------\r\n\r\nexport class AuthUtils {\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Is token expired?\r\n     *\r\n     * @param token\r\n     * @param offsetSeconds\r\n     */\r\n    static isTokenExpired(token: string, offsetSeconds?: number): boolean {\r\n        // Return if there is no token\r\n        if (!token || token === '') {\r\n            return true;\r\n        }\r\n\r\n        // Get the expiration date\r\n        const date = this._getTokenExpirationDate(token);\r\n\r\n        offsetSeconds = offsetSeconds || 0;\r\n\r\n        if (date === null) {\r\n            return true;\r\n        }\r\n\r\n\r\n        // Check if the token is expired\r\n        return !(date.valueOf() > new Date().valueOf() + offsetSeconds * 1000);\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Private methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Base64 decoder\r\n     * Credits: https://github.com/atk\r\n     *\r\n     * @param str\r\n     * @private\r\n     */\r\n    private static _b64decode(str: string): string {\r\n        const chars =\r\n            'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\n        let output = '';\r\n\r\n        str = String(str).replace(/=+$/, '');\r\n\r\n        if (str.length % 4 === 1) {\r\n            throw new Error(\r\n                \"'atob' failed: The string to be decoded is not correctly encoded.\"\r\n            );\r\n        }\r\n\r\n        /* eslint-disable */\r\n        for (\r\n            // initialize result and counters\r\n            let bc = 0, bs: any, buffer: any, idx = 0;\r\n            // get next character\r\n            (buffer = str.charAt(idx++));\r\n            // character found in table? initialize bit storage and add its ascii value;\r\n            ~buffer &&\r\n            ((bs = bc % 4 ? bs * 64 + buffer : buffer),\r\n            // and if not first of each 4 characters,\r\n            // convert the first 8 bits to one ascii character\r\n            bc++ % 4)\r\n                ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\r\n                : 0\r\n        ) {\r\n            // try to find character in table (0-63, not found => -1)\r\n            buffer = chars.indexOf(buffer);\r\n        }\r\n        /* eslint-enable */\r\n\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * Base64 unicode decoder\r\n     *\r\n     * @param str\r\n     * @private\r\n     */\r\n    private static _b64DecodeUnicode(str: any): string {\r\n        return decodeURIComponent(\r\n            Array.prototype.map\r\n                .call(\r\n                    this._b64decode(str),\r\n                    (c: any) =>\r\n                        '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)\r\n                )\r\n                .join('')\r\n        );\r\n    }\r\n\r\n    /**\r\n     * URL Base 64 decoder\r\n     *\r\n     * @param str\r\n     * @private\r\n     */\r\n    private static _urlBase64Decode(str: string): string {\r\n        let output = str.replace(/-/g, '+').replace(/_/g, '/');\r\n        switch (output.length % 4) {\r\n            case 0: {\r\n                break;\r\n            }\r\n            case 2: {\r\n                output += '==';\r\n                break;\r\n            }\r\n            case 3: {\r\n                output += '=';\r\n                break;\r\n            }\r\n            default: {\r\n                throw Error('Illegal base64url string!');\r\n            }\r\n        }\r\n        return this._b64DecodeUnicode(output);\r\n    }\r\n\r\n    /**\r\n     * Decode token\r\n     *\r\n     * @param token\r\n     * @private\r\n     */\r\n    private static _decodeToken(token: string): any {\r\n        // Return if there is no token\r\n        if (!token) {\r\n            return null;\r\n        }\r\n\r\n        // Split the token\r\n        const parts = token.split('.');\r\n\r\n        if (parts.length !== 3) {\r\n            throw new Error(\r\n                \"The inspected token doesn't appear to be a JWT. Check to make sure it has three parts and see https://jwt.io for more.\"\r\n            );\r\n        }\r\n\r\n        // Decode the token using the Base64 decoder\r\n        const decoded = this._urlBase64Decode(parts[1]);\r\n\r\n        if (!decoded) {\r\n            throw new Error('Cannot decode the token.');\r\n        }\r\n\r\n        return JSON.parse(decoded);\r\n    }\r\n\r\n    /**\r\n     * Get token expiration date\r\n     *\r\n     * @param token\r\n     * @private\r\n     */\r\n    private static _getTokenExpirationDate(token: string): Date | null {\r\n        // Get the decoded token\r\n\r\n        const decodedToken = this._decodeToken(token);\r\n        //decodedToken.iss = \"Fuse\";\r\n        decodedToken.iat = new Date(decodedToken.iat);\r\n        decodedToken.iat = Math.floor(decodedToken.iat.getTime() / 10000);\r\n\r\n        // Return if the decodedToken doesn't have an 'exp' field\r\n        //debugger\r\n        if (!decodedToken.hasOwnProperty('exp')) {\r\n            return null;\r\n        }\r\n\r\n        // Convert the expiration date\r\n        const date = new Date(0);\r\n        date.setUTCSeconds(decodedToken.exp);\r\n        date.setUTCSeconds(decodedToken.exp);\r\n\r\n        return date;\r\n    }\r\n\r\n    public static getTokenExpirationTime(token: string): any {\r\n        if (!token) {\r\n            return null;\r\n        }\r\n\r\n        try {\r\n            const payload = JSON.parse(atob(token.split('.')[1]));\r\n            if (!payload.exp) {\r\n                return null;\r\n            }\r\n\r\n            return new Date(payload.exp * 1000);\r\n        } catch (error) {\r\n            console.error('Error decoding token:', error);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\nimport { User } from 'app/core/user/user.types';\r\nimport { map, Observable, ReplaySubject, tap } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserService {\r\n    private _httpClient = inject(HttpClient);\r\n    private _user: ReplaySubject<User> = new ReplaySubject<User>(1);\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Accessors\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Setter & getter for user\r\n     *\r\n     * @param value\r\n     */\r\n    set user(value: User) {\r\n        // Store the value\r\n        this._user.next(value);\r\n    }\r\n\r\n    get user$(): Observable<User> {\r\n        return this._user.asObservable();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Get the current signed-in user data\r\n     */\r\n    get(): Observable<User> {\r\n        return this._httpClient.get<User>('api/common/user').pipe(\r\n            tap((user) => {\r\n                this._user.next(user);\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Update the user\r\n     *\r\n     * @param user\r\n     */\r\n    update(user: User): Observable<any> {\r\n        return this._httpClient.patch<User>('api/common/user', { user }).pipe(\r\n            map((response) => {\r\n                this._user.next(response);\r\n            })\r\n        );\r\n    }\r\n}\r\n","export class InvalidTokenError extends Error {\n}\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {\n        let code = p.charCodeAt(0).toString(16).toUpperCase();\n        if (code.length < 2) {\n            code = \"0\" + code;\n        }\n        return \"%\" + code;\n    }));\n}\nfunction base64UrlDecode(str) {\n    let output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw new Error(\"base64 string is not of the correct length\");\n    }\n    try {\n        return b64DecodeUnicode(output);\n    }\n    catch (err) {\n        return atob(output);\n    }\n}\nexport function jwtDecode(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified: must be a string\");\n    }\n    options || (options = {});\n    const pos = options.header === true ? 0 : 1;\n    const part = token.split(\".\")[pos];\n    if (typeof part !== \"string\") {\n        throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);\n    }\n    let decoded;\n    try {\n        decoded = base64UrlDecode(part);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);\n    }\n    try {\n        return JSON.parse(decoded);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);\n    }\n}\n","import { Component } from '@angular/core';\r\nimport { MatDialogActions, MatDialogContent, MatDialogRef, MatDialogTitle } from '@angular/material/dialog';\r\nimport { MatButton } from '@angular/material/button';\r\nimport { interval, take } from 'rxjs';\r\nimport { MatIcon } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-tokenrenewaldialog',\r\n  standalone: true,\r\n    imports: [\r\n        MatDialogContent,\r\n        MatDialogActions,\r\n        MatButton,\r\n        MatDialogTitle,\r\n        MatIcon,\r\n    ],\r\n  templateUrl: './tokenrenewaldialog.component.html',\r\n  styleUrl: './tokenrenewaldialog.component.scss'\r\n})\r\nexport class TokenrenewaldialogComponent {\r\n    countDown = 30;\r\n\r\n    constructor(private dialogRef: MatDialogRef<TokenrenewaldialogComponent>) {\r\n        interval(1000)\r\n            .pipe(take(30))\r\n            .subscribe((val) => {\r\n                this.countDown = 29 - val;\r\n                if (this.countDown === 0) {\r\n                    this.dialogRef.close(false);\r\n                }\r\n            });\r\n    }\r\n\r\n    onRenew(): void {\r\n        this.dialogRef.close(true);\r\n    }\r\n\r\n    onLogout(): void {\r\n        this.dialogRef.close(false);\r\n    }\r\n\r\n}\r\n","<div class=\"relative flex h-full w-full flex-col\">\r\n    <!-- Content -->\r\n    <div\r\n        class=\"flex flex-auto flex-col items-center pb-6 sm:flex-row sm:items-start sm:pb-8\"\r\n    >\r\n\r\n        <div class=\"flex h-10 w-10 flex-0 items-center justify-center rounded-full sm:mr-4 bg-blue-100 text-blue-600 dark:bg-blue-600 dark:text-blue-50\"\r\n        >\r\n            <mat-icon\r\n                [svgIcon]=\"'heroicons_solid:question-mark-circle'\"\r\n            >\r\n\r\n            </mat-icon>\r\n        </div>\r\n\r\n        <div class=\"flex flex-col items-center space-y-1 text-center sm:mt-0 sm:items-start sm:pr-8 sm:text-left\">\r\n            <h2 class=\"text-xl font-medium leading-6\">Tu sesión está por expirar</h2>\r\n            <p class=\"text-secondary\">Tu sesión expirará en <strong>{{ countDown }}</strong> segundos.</p>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div\r\n        class=\"flex items-center justify-center space-x-3 bg-gray-50  py-4 dark:bg-black dark:bg-opacity-10 sm:justify-end\"\r\n    >\r\n        <button\r\n            mat-flat-button\r\n            [color]=\"'primary'\"\r\n            class=\"sm:w-auto w-full bg-crediblue-50  hover:bg-crediblue-100 text-white font-semibold py-2 px-4 rounded-lg transition duration-200\"\r\n            (click)=\"onRenew()\"\r\n        >\r\n            Extender\r\n        </button>\r\n        <button\r\n            mat-stroked-button\r\n            class=\"sm:w-auto w-full bg-crediorange-100 rounded-lg transition duration-200 text-white font-semibold\"\r\n            (click)=\"onLogout()\"\r\n        >\r\n            Cerrar sesión\r\n        </button>\r\n    </div>\r\n</div>\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { DestroyRef, inject, Injectable } from '@angular/core';\r\nimport { AuthUtils } from 'app/core/auth/auth.utils';\r\nimport { UserService } from 'app/core/user/user.service';\r\nimport {\r\n    BehaviorSubject,\r\n    catchError,\r\n    interval,\r\n    map,\r\n    Observable,\r\n    of,\r\n    switchMap,\r\n    takeUntil,\r\n    tap,\r\n    throwError,\r\n} from 'rxjs';\r\nimport { AppSettingsService } from '../app-config/app-settings-service';\r\nimport { user } from '../../mock-api/common/user/data';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport { AesEncryptionService } from '../services/aes-encryption.service';\r\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { TokenrenewaldialogComponent } from '../../pages/shared/tokenrenewaldialog/tokenrenewaldialog.component';\r\nimport { Router } from '@angular/router';\r\n\r\nexport type UserRole = 'Aliado' | 'Analista' | 'Super Admin' | 'Auditor' | 'Trabajador' | 'Cliente';\r\nexport type UserType = 'Empresa Aliada' | 'Trabajador' | 'EmprasaMaestra' | 'Cliente-Aliado' | 'Empresa Cliente';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n    private _authenticated: boolean = false;\r\n    private _httpClient = inject(HttpClient);\r\n    private _userService = inject(UserService);\r\n    private _appSettings = inject(AppSettingsService);\r\n    private aesEncriptService = inject(AesEncryptionService);\r\n    private readonly destroyedRef = inject(DestroyRef);\r\n    private matDialog = inject(MatDialog);\r\n    private router = inject(Router);\r\n\r\n    private _tokenExpirationSubject = new BehaviorSubject<boolean>(false); // Para notificar que el token está por expirar\r\n\r\n    constructor() {\r\n        this.restoreSession();\r\n        this.checkTokenExpiration();\r\n    }\r\n\r\n    private restoreSession(): void {\r\n        if (!this.accessToken || !this.accessRefreshToken) {\r\n            this.signOut();\r\n            return;\r\n        }\r\n\r\n        // Verifica si el token está expirado\r\n        if (AuthUtils.isTokenExpired(this.accessToken)) {\r\n            console.log(\"Token expirado, intentando renovar...\");\r\n            this.signInUsingToken().subscribe((isAuthenticated) => {\r\n                if (!isAuthenticated) {\r\n                    console.log(\"No se pudo renovar el token, cerrando sesión...\");\r\n                    this.signOut();\r\n                } else {\r\n                    console.log(\"Token renovado exitosamente.\");\r\n                    this._authenticated = true;\r\n                }\r\n            });\r\n        } else {\r\n            console.log(\"Token válido, restaurando sesión...\");\r\n            this._authenticated = true;\r\n        }\r\n    }\r\n\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Accessors\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Setter & getter for access token\r\n     */\r\n    set accessToken(token: string) {\r\n        localStorage.setItem('accessToken', token);\r\n    }\r\n\r\n    set refreshToken(token: string) {\r\n        localStorage.setItem('refreshToken', token);\r\n    }\r\n\r\n    get accessToken(): string {\r\n        return localStorage.getItem('accessToken') ?? '';\r\n    }\r\n\r\n    get accessRefreshToken(): string {\r\n        return localStorage.getItem('refreshToken') ?? '';\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Forgot password\r\n     *\r\n     * @param email\r\n     */\r\n    forgotPassword(email: string): Observable<any> {\r\n        return this._httpClient.post(`${this._appSettings.auth.url.baseReset}?email=${email}`, {});\r\n    }\r\n\r\n    /**\r\n     * Reset password\r\n     *\r\n     * @param password\r\n     */\r\n    resetPassword(form: any): Observable<any> {\r\n        return this._httpClient.post(this._appSettings.auth.url.baseChange, form);\r\n    }\r\n\r\n    /**\r\n     * Sign in\r\n     *\r\n     * @param credentials\r\n     */\r\n    signIn(credentials: { correo: string; contrasena: string }): Observable<any> {\r\n        const form = {\r\n            correo: credentials.correo,\r\n            contrasena: credentials.contrasena\r\n        }\r\n\r\n        const encryptForm = {\r\n            login: this.aesEncriptService.encryptObject(form)\r\n        }\r\n        // Throw error, if the user is already logged in\r\n        //TODO esto ocasiona error\r\n        if (this._authenticated) {\r\n            return throwError('User is already logged in.');\r\n        }\r\n\r\n        //return this._httpClient.post('api/auth/sign-in', credentials).pipe(\r\n        return this._httpClient.post(this._appSettings.auth.url.base, encryptForm).pipe(\r\n            map((response: any) => {\r\n                const dataUser = {\r\n                    id: Math.random().toString(),\r\n                    name: response.data.nombre,\r\n                    email: response.data.correo,\r\n                    avatar: 'images/avatars/avatar-user.png',\r\n                    status: 'online'\r\n                }\r\n                response.tokenType = 'bearer',\r\n                response.user = {\r\n                    ...dataUser\r\n                }\r\n                delete response.data;\r\n               /* {\r\n                    \"user\": {\r\n                        \"name\": \"Brian Hughes\",\r\n                        \"email\": \"hughes.brian@company.com\",\r\n                        \"avatar\": \"images/avatars/brian-hughes.jpg\",\r\n                        \"status\": \"online\"\r\n                    },\r\n                    \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE3Mjc0MTAzODMsImlzcyI6IkZ1c2UiLCJleHAiOjE3MjgwMTUxODN9.NbafzoPOj3wrDaEBxDUvqcn47KN6CNyu3kpCm88rw7M\",\r\n                    \"tokenType\": \"bearer\"\r\n                }*/\r\n                return response;\r\n\r\n            }),\r\n            switchMap((response: any) => {\r\n                // Store the access token in the local storage\r\n                //this.accessToken = response.token;\r\n                this.accessToken = response.accessToken;\r\n                this.refreshToken = response.refreshToken;\r\n\r\n                // Set the authenticated flag to true\r\n                this._authenticated = true;\r\n\r\n                // Store the user on the user service\r\n\r\n                //this._userService.user = dataUser;\r\n                this._userService.user = response.user;\r\n                //this._userService.user = user;\r\n\r\n                // Return a new observable with the response\r\n                return of(response);\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sign in using the access token\r\n     */\r\n    signInUsingToken(): Observable<boolean> {\r\n        const token = this.accessToken;\r\n        const refreshToken = this.accessRefreshToken;\r\n\r\n        if (!token || !refreshToken) {\r\n            this.signOut();\r\n            return of(false);\r\n        }\r\n\r\n        console.log(\"Verificando token con API...\");\r\n\r\n        return this._httpClient.post(this._appSettings.auth.url.baseRefresh, { token, refreshToken }).pipe(\r\n            catchError((error) => {\r\n                this.signOut();\r\n                return of(false);\r\n            }),\r\n            switchMap((response: any) => {\r\n                if (response.token) {\r\n                    this.accessToken = response.token;\r\n                    this.refreshToken = response.refreshToken;\r\n                    this._authenticated = true;\r\n                    return of(true);\r\n                }\r\n                this.signOut();\r\n                return of(false);\r\n            })\r\n        );\r\n    }\r\n\r\n\r\n    public checkTokenExpiration(): void {\r\n        let userInactive = true; // Estado de inactividad del usuario\r\n        const inactivityThreshold = 300000; // 5 minutos de inactividad (ajusta según necesites)\r\n        const tokenExpirationThreshold = 60000; // 1 minuto antes de vencer (para renovación automática)\r\n\r\n        // Función para marcar al usuario como activo\r\n        const markUserAsActive = () => {\r\n            userInactive = false; // El usuario está activo\r\n            setTimeout(() => {\r\n                userInactive = true; // Vuelve a inactivo después del umbral\r\n            }, inactivityThreshold);\r\n        };\r\n\r\n        // Detectar actividad del usuario\r\n        const activityEvents = ['mousemove', 'keydown', 'scroll', 'click', 'touchstart'];\r\n        activityEvents.forEach(event => {\r\n            window.addEventListener(event, markUserAsActive);\r\n        });\r\n\r\n        // Detectar si el usuario cambia de pestaña o minimiza el navegador\r\n        document.addEventListener('visibilitychange', () => {\r\n            if (document.visibilityState === 'hidden') {\r\n                userInactive = true; // El usuario está inactivo (minimizó el navegador o cambió de pestaña)\r\n            } else {\r\n                markUserAsActive(); // El usuario volvió a la aplicación\r\n            }\r\n        });\r\n\r\n        // Detectar si el usuario cambia a otra aplicación\r\n        window.addEventListener('blur', () => {\r\n            userInactive = true; // El usuario está inactivo (cambió a otra aplicación)\r\n        });\r\n        window.addEventListener('focus', markUserAsActive); // El usuario volvió a la aplicación\r\n\r\n        interval(10000) // Revisa cada 10 segundos\r\n            .pipe(\r\n                tap(() => {\r\n                    const token = this.accessToken; // Se obtiene desde localStorage\r\n                    const refreshToken = this.accessRefreshToken; // Se obtiene desde localStorage\r\n\r\n                    if (!token || !refreshToken) {\r\n                        this.signOut(); // Si no hay token o refreshToken, cerrar sesión\r\n                        return;\r\n                    }\r\n\r\n                    const expiresIn = AuthUtils.getTokenExpirationTime(token);\r\n                    const timeLeft = expiresIn - Date.now();\r\n\r\n                    if (timeLeft > 0 && timeLeft <= tokenExpirationThreshold) {\r\n                        // Token está a punto de vencer (1 minuto antes)\r\n                        if (!userInactive) {\r\n                            // Usuario activo: renovar token automáticamente\r\n                            this.signInUsingToken().subscribe({\r\n                                next: (success) => {\r\n                                    if (success) {\r\n                                        console.log('Token renovado automáticamente');\r\n                                    } else {\r\n                                        console.error('Error renovando el token');\r\n                                        this.signOut(); // Cerrar sesión si falla la renovación\r\n                                    }\r\n                                },\r\n                                error: (err) => {\r\n                                    console.error('Error renovando el token:', err);\r\n                                    this.signOut(); // Cerrar sesión si hay un error\r\n                                },\r\n                            });\r\n                        }\r\n                    } else if (timeLeft <= 0) {\r\n                        // Token ya expiró\r\n                        if (userInactive) {\r\n                            // Usuario inactivo: cerrar sesión automáticamente\r\n                            this.signOut();\r\n                        } else {\r\n                            // Usuario activo pero el token expiró: cerrar sesión\r\n                            this.signOut();\r\n                        }\r\n                    }\r\n                })\r\n            ).subscribe();\r\n    }\r\n\r\n    public openTokenRenewalDialog(): void {\r\n        const dialogRef = this.matDialog.open(TokenrenewaldialogComponent, {\r\n            width: '400px',\r\n            disableClose: true,\r\n        });\r\n\r\n        dialogRef.afterClosed().subscribe((renew: boolean) => {\r\n            if (renew) {\r\n                this.signInUsingToken().subscribe();\r\n            } else {\r\n                this.signOut();\r\n                this.router.navigate(['/sign-in']);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    logoutSession(): Observable<any> {\r\n        return this._httpClient.post(this._appSettings.auth.url.baseOut, {});\r\n    }\r\n\r\n    /**\r\n     * Sign out\r\n     */\r\n    signOut(): Observable<any> {\r\n        console.log(\"Cerrando sesión...\");\r\n        localStorage.removeItem('accessToken');\r\n        localStorage.removeItem('refreshToken');\r\n\r\n        this._authenticated = false;\r\n        this._userService.user = null; // Limpiar usuario\r\n        //this.router.navigate(['/sign-in']);\r\n\r\n        return of(true);\r\n    }\r\n\r\n    /**\r\n     * Sign up\r\n     *\r\n     * @param user\r\n     */\r\n    signUp(user: {\r\n        name: string;\r\n        email: string;\r\n        password: string;\r\n        company: string;\r\n    }): Observable<any> {\r\n        return this._httpClient.post('api/auth/sign-up', user);\r\n    }\r\n\r\n    /**\r\n     * Unlock session\r\n     *\r\n     * @param credentials\r\n     */\r\n    unlockSession(credentials: {\r\n        email: string;\r\n        password: string;\r\n    }): Observable<any> {\r\n        return this._httpClient.post('api/auth/unlock-session', credentials);\r\n    }\r\n\r\n    /**\r\n     * Check the authentication status\r\n     */\r\n    check(): Observable<boolean> {\r\n        // Check if the user is logged in\r\n        if (this._authenticated) {\r\n            return of(true);\r\n        }\r\n\r\n        // Check the access token availability\r\n        if (!this.accessToken) {\r\n            return of(false);\r\n        }\r\n\r\n        // Check the access token expire date\r\n        if (AuthUtils.isTokenExpired(this.accessToken)) {\r\n           return of(false);\r\n        }\r\n\r\n        // If the access token exists, and it didn't expire, sign in using it\r\n        return this.signInUsingToken();\r\n        //return of(true);\r\n\r\n    }\r\n\r\n    private decodeToken(): any {\r\n        if (!this.accessToken) return null;\r\n        try {\r\n            return jwtDecode(this.accessToken);\r\n        } catch (error) {\r\n            console.error('Error al decodificar el token', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Obtiene el rol desde el token\r\n    getRole(): string | null {\r\n        const decoded = this.decodeToken();\r\n        return decoded?.[\"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\"] || null;\r\n    }\r\n\r\n    // Obtiene el TipoUsuario desde el token\r\n    getTipoUsuario(): string | null {\r\n        const decoded = this.decodeToken();\r\n        return decoded?.TipoUsuario || null;\r\n    }\r\n\r\n    // Valida si tiene un rol específico\r\n    hasRole(role: string): boolean {\r\n        return this.getRole() === role;\r\n    }\r\n\r\n\r\n    // Valida si es un TipoUsuario específico\r\n    hasTipoUsuario(tipoUsuario: string): boolean {\r\n        return this.getTipoUsuario() === tipoUsuario;\r\n    }\r\n}\r\n"],"mappings":"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","names":[],"x_google_ignoreList":[2]}